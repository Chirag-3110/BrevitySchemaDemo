# https://www.notion.so/techsellence/29a8dc7007b841b08722190c5460bfa4?v=cae06adcb94444bbb95f5652fa75bc83 -> User Table
# https://www.notion.so/techsellence/796fad588f374d76b69f31fa1a3f03f4?v=ad9d404ed55a4d4cbdd89f7c31311b89 -> Workflow Table
# https://www.notion.so/techsellence/53a77d60b4d24437b34fa7e7c494c5da?v=a96d8e4886474957b86939a76c8d1706 -> Workflow Definition
# https://www.notion.so/techsellence/f6fe93e4dbbb4367b086e62c3baed2b9?v=33204c73c8084a14bcd68c36b6b87a8f -> Order Table
# https://www.notion.so/techsellence/8027671d890c444e879e5734a5366f32?v=f61e6328f50a467e9d509b19cfc33cb7 -> Order Task Table

# Workflow-table (1) →  Workflow-Definition-Table ( many )
# Workflow-table(1)  →  Order-Table (many)
# order-Table (1)    →  Order-Task-Table (many)
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } }
type User
  @model{
  email: String! @primaryKey
  name: String!
  isAdmin: Boolean!
  phone: AWSPhone!
  supervisor: String @index(name: "bySuperwisedrID", queryField: "userBySuperWisedID")
  organization: String @index(name: "byOrganization", queryField: "usersByOrganization")
  isApproved: Boolean!
  isEmailApproved: Boolean!
  isPhoneVerified: Boolean!
  isGooleSignIn: Boolean!
  isFacebookSignIn: Boolean!
  isGeneralAuthSignIn: Boolean!
  Designation: String!
  imageUrl:String           #s3path
  orders: [Order] @manyToMany(relationName: "UserOrderMapping")
  notifications: [UserNotifications] @hasMany
  OrganizationWorkFlow: [Workflow] @hasMany
}

type Order
  @model{
  id: ID! @primaryKey
  orderName: String! @index(name: "byOrderName",sortKeyFields: ["createdAt"], queryField: "orderByOrderName")
  description: String!
  currentStatus: CurrentStatusEnum!
  createdDate: AWSDateTime!
  OrderJSON: AWSJSON!
  dueDate:AWSDateTime
  createdBy:String!
  lastEditedOn:AWSDateTime
  lastEditedBy:String
  createdAt: AWSDateTime!
  tasks: [OrderTask] @hasMany
  users: [User] @manyToMany(relationName: "UserOrderMapping")
  relatedWorkFlow: Workflow @belongsTo
}
enum CurrentStatusEnum {
  ORDER_CREATED
  ORDER_IN_PROGRESS
  ORDER_CANCELLED
  ORDER_COMPLETED
}
type OrderTask
  @model{
  id: ID! @primaryKey
  taskStatus: TaskStatusEnum!
  TaskName: String!
  NextTaskName: [String]
  TaskAssignedTo: String @index( name: "byTaskAssignedTo" sortKeyFields: ["TaskName"] queryField: "taskByAsssignedUSer" )
  isFirstUser: Boolean!
  TaskDescription: String!
  UserFilePathList: [String]
  AssignedTimeStamp: AWSTime!
  TaskCompletionTime: AWSTime!
  DueDate: AWSDateTime!
  orderTasksId: ID! @index(name: "byorderTasksId", queryField: "taskByorderTasksId")
  InformationTo:User
}
enum TaskStatusEnum {
  TASK_FORWARD
  TASK_CANCELLED
  TASK_COMPLETED
  TASK_IN_PROGRESS
  TASK_TO_START
}

type Workflow
  @model{
  id: ID! @primaryKey 
  workflowname: String!
  workflowOrders: [Order] @hasMany
  workflowdefinitions: [WorkflowDefinition] @hasMany
  WorkFlowJSON: AWSJSON!
  WorkFlowDescription: String!
  SaveAsDraft: Boolean!
  CreatedBy: String
  OwnedBy: String
  createdAt: AWSDateTime!
}

type WorkflowDefinition
  @model {
## id's value is autogenerated so need not to be add in schema
  id: ID!
  NodeName: String! @index( name: "byNodeName" ,sortKeyFields: ["WorkFlowName"], queryField: "nodeByNodeandWorkFlowName" )
  NextNodeName: [String]
  Description: String!
  isRootNode: Boolean!
  WorkFlowName: String!
}

type UserNotifications
  @model{
  id:ID!
  userNotificationsId: ID! @index(name: "byUserMail",sortKeyFields: ["NotificationTime"], queryField: "notificationByUser")
  NotificationStatus: NotifStatusEnum! @index(name: "byNotificationStatus", queryField: "userByNotifcationStatus")
  NotificationContent: String!
  NotificationTime: AWSDateTime!
}

enum NotifStatusEnum {
  SEEN
  UNSEEN
}

type TaskCommentMapping
  @model{
  id:ID
  commentPath: String! @primaryKey
  filePath: String! @index(name: "byFilePath", queryField: "commentByFilePath")
  orderTask: Order
  ParentCommentID:TaskCommentMapping
}

type Subscription {
  onNotificationByUserId(userNotificationsId: ID!): UserNotifications
    @aws_subscribe(mutations: ["createUserNotifications"])
}
